. Little Man Computer simulator so that you can simulate while you simulate
. Does not support INPUT command
. OUTPUT command prints value to analytical engine printer
A write in columns
A write annotation LMC OUTPUT:
A write new line
. load instructions starting at V100
. v50 100
. v51 1
. v52 counter //DONT USE
. v53 pointer to current instruction
. v54 total instruction code [000-902]
. v55 instruction code alone [0-9]
. v56 instruction acted on mailbox number [00-99]
. v57 accumulator
. v58 negative flag 0 if false, 1 if true
. v59 temp variable A
. v61 - v69 instruction code constants
N50 100
N51 1
N52 1
N53 99

(?
. increase pointer by 1
+
L51
L53
S53

. load next instruction into v54
*
L51
L53
S0
A include cards get
*
L51
L0
S54

. load mailbox number acted upon into 56
. load instruction code into 54
/
L54
L50
S56
S55'

. instruction logic starts
. reminder
. v54 total instruction code [000-902]
. v55 instruction code alone [0-9]
. v56 instruction acted on mailbox number [00-99]
. v57 accumulator
. v58 negative flag 0 if false, 1 if true
. v59 temp variable A
. v61 - v69 instruction code constants
N61 1
N62 2
N63 3
N64 4 . Not used in LMC, but kept in for no reason
N65 5
N66 6
N67 7
N68 8
N69 9

. for each of the instructions, see if minus in both directions is positive
. ADD block
-
L61
L55
{?
-
L55
L61
{?
. ADD
. first, reset the negative flag
-
L51
L51
S58
. add 100 to mailbox number so that index is correct in analytical engine
. load store index into v0
+
L50
L56
S000
. get value of store in index of mailbox
A include cards get
. add value gotten to accumulator value and store in accumulator
+
L000
L57
S57
}
}

. SUBTRACT block
-
L62
L55
{?
-
L55
L62
{?
. SUBTRACT
. first, reset the negative flag
-
L51
L51
S58
. add 100 to mailbox number so that index is correct in analytical engine
. load store index into v0
+
L50
L56
S000
. get value of store in index of mailbox
A include cards get
. subtract value from accumulator value and store in accumulator
-
L57
L000
S57
{?
. ignore this
}{
. if the result was negative, set negative flag
*
L51
L51
S58

. create -1 in temp variable A
-
L51
L51
S59
-
L59
L51
S59

. multiply negative accumulator value by -1 to make positive
*
L57
L59
S57
}
}
}

. STORE block
-
L63
L55
{?
-
L55
L63
{?
. STORE
. store mailbox number in v0
. add 100 to mailbox number so that index is correct in analytical engine
. load store index into v0
+
L50
L56
S000

. store accumulator in v1
*
L51
L57
S001

. sets the mailbox specified to accumulator value
A include cards set
}
}

. LOAD block
-
L65
L55
{?
-
L55
L65
{?
. LOAD
. store mailbox number in v0
. add 100 to mailbox number so that index is correct in analytical engine
. load store index into v0
+
L50
L56
S000

. get value at the specified index
A include cards get

. store the gotten value in the accumulator
*
L51
L000
S57
}
}

. BRANCH unconditional block
-
L66
L55
{?
-
L55
L66
{?
. BRANCH
. load the mailbox, minus 1, then store in temp variable A
-
L56
L51
S59
. load temp varible A, add 100, then store in the current pointer slot
+
L59
L50
S53
}
}

. BRANCH IF ZERO block
-
L67
L55
{?
-
L55
L67
{?
. BRANCH IF ZERO
. see if accumulator is 0
. create 0 and store in temp variable A
-
L51
L51
S59

. compare accumulator and 0
-
L57
L59
{?
-
L59
L57
{?
. load the mailbox, minus 1, then store in temp variable A
-
L56
L51
S59
. load temp varible A, add 100, then store in the current pointer slot
+
L59
L50
S53
}
}
}
}

. BRANCH IF POSITIVE block
-
L68
L55
{?
-
L55
L68
{?
. BRANCH IF POSITIVE
. create 0 and store in temp variable A
-
L51
L51
S59

. compare negative flag and 0
-
L58
L59
{?
-
L59
L58
{?
. load the mailbox, minus 1, then store in temp variable A
-
L56
L51
S59
. load temp varible A, add 100, then store in the current pointer slot
+
L59
L50
S53
}
}
}
}

  . FUNCTION block
  -
  L6X
  L55
  {?
  -
  L55
  L6X
  {?
  . FUNCTION
  }
  }

. Special instructions for 900's input and output
-
L69
L55
{?
-
L55
L69
{?
-
L61
L56
{?
-
L56
L61
{?
. INPUT
H input not supported yet
}
}
-
L62
L56
{?
-
L56
L62
{?
. OUTPUT
. load accumulator value and print
*
L51
L57
P
A write new line
}
}
}
}

. instruction logic ends

. check to see if the instruction code is 0, and if so, stop repeating
. make 0 and store in temp variable A
-
L51
L51
S59
. subtract instruction code from 0 to see if instruction code is 0
-
L59
L55
)
A write new line

. print all values of lmc memory in order
. these are stored in slots 100 - 199
. constant 200
N200 200
. counter
N201 100
. constant 100
N202 100
A write annotation LMC RAM VALUES:
A write new line
(?
. print
-
L201
L202
P
A write annotation :
*
L51
L201
S000
A include cards get
*
L51
L000
P
A write new line

. increase counter by 1
+
L51
L201
S201
-
L201
L200
. stop the operation once you reach the end
)
